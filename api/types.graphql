type User @model {
    id                     : ID!            @isUnique
    createdAt              : DateTime!
    updatedAt              : DateTime!

    expunged               : Boolean!       @defaultValue(value : false)
    active                 : Boolean!       @defaultValue(value : true)
    name                   : String!        @isUnique
    email                  : String!        @isUnique
    bio                    : String!        @defaultValue(value : "")
    password               : String!
    location               : String!        @defaultValue(value : "unknown")
    imageUrl               : String!        @defaultValue(value : "")

    contacts               : [User!]!       @relation(name      : "UserContacts")
    contactOf              : [User!]!       @relation(name      : "UserContacts")
    currentGroups          : [Group!]!      @relation(name      : "UserCurrentGroups")
    formerGroups           : [Group!]!      @relation(name      : "UserFormerGroups")
    commentsPosted         : [Comment!]!    @relation(name      : "UserCommentsPosted")
    authorships            : [Authorship!]! @relation(name      : "UserAuthorships")
    requestsMade           : [Request!]!    @relation(name      : "UserRequestsMade")
    requestsPledged        : [Request!]!    @relation(name      : "UserRequestsPledged")
    requestsFilled         : [Request!]!    @relation(name      : "UserRequestsFilled")

    # watching
    groupsWatched          : [Group!]!      @relation(name      : "UserGroupsWatched")
    commentsWatched        : [Comment!]!    @relation(name      : "UserCommentsWatched")
    requestsWatched        : [Request!]!    @relation(name      : "UserRequestsWatched")
    articlesWatched        : [Article!]!    @relation(name      : "UserArticlesWatched")


    articlesEndorsed       : [Article!]!    @relation(name      : "UserArticlesEndorsed")
    requestsEndorsed       : [Request!]!    @relation(name      : "UserRequestsEndorsed")
    commentsEndorsed       : [Comment!]!    @relation(name      : "UserCommentsEndorsed")
}

type Group @model {
    id            : ID!            @isUnique
    createdAt     : DateTime!
    updatedAt     : DateTime!
    expunged      : Boolean!       @defaultValue(value : false)
    active        : Boolean!       @defaultValue(value : true)
    name          : String!        @isUnique
    description   : String!
    imageURL      : String!
    authorships   : [Authorship!]! @relation(name      : "GroupAuthorships")
    # requests    : [Request!]!    @relation(name      : "GroupRequestsAuthored")
    members       : [User!]!       @relation(name      : "UserCurrentGroups")
    formerMembers : [User!]!       @relation(name      : "UserFormerGroups")

    watchers      : [User!]!       @relation(name      : "UserGroupsWatched")
}

type Article @model {
    id           : ID!            @isUnique
    createdAt    : DateTime!
    updatedAt    : DateTime!

    expunged     : Boolean!       @defaultValue(value : false)
    title        : String!
    abstract     : String!
    content      : String!

    authorships  : [Authorship!]! @relation(name      : "AuthorshipArticle")
    watchers     : [User!]!       @relation(name      : "UserArticlesWatched")
    comments     : [Comment!]!    @relation(name      : "ArticleComments")
    endorsements : [User!]!       @relation(name      : "UserArticlesEndorsed")
    # TODO related articles
}

type Authorship @model {
    id        : ID!       @isUnique
    createdAt : DateTime!
    updatedAt : DateTime!
    users     : [User!]!  @relation(name : "UserAuthorships")
    group     : Group!    @relation(name : "GroupAuthorships")
    article   : Article!  @relation(name : "AuthorshipArticle")
}

type Request @model {
    id           : ID!         @isUnique
    createdAt    : DateTime!
    updatedAt    : DateTime!
    expunged     : Boolean!    @defaultValue(value : false)
    title        : String!
    body         : String!
    pledges      : [User!]!    @relation(name      : "UserRequestsPledged")
    authors      : [User!]!    @relation(name      : "UserRequestsMade")
    comments     : [Comment!]! @relation(name      : "RequestComments")
    fillers      : [User!]!    @relation(name      : "UserRequestsFilled")
    endorsements : [User!]!    @relation(name      : "UserRequestsEndorsed")
    watchers     : [User!]!    @relation(name      : "UserRequestsWatched")
}

type Comment @model {
    id            : ID!         @isUnique
    createdAt     : DateTime!
    updatedAt     : DateTime!
    expunged      : Boolean!    @defaultValue(value : false)
    poster        : User!       @relation(name      : "UserCommentsPosted")
    parentArticle : Article     @relation(name      : "ArticleComments")
    parentRequest : Request     @relation(name      : "RequestComments")
    parentComment : Comment     @relation(name      : "CommentComments")
    comments      : [Comment!]! @relation(name      : "CommentComments")
    body          : String!
    endorsements  : [User!]!    @relation(name      : "UserCommentsEndorsed")
    watchers      : [User!]!    @relation(name      : "UserCommentsWatched")
}
