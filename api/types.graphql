##################################################################################################
# TODO: create DateTime scalar (currently String formatted as "YYYY-MM-DDTHH:mm:ssZ")
# TODO: create notion of history && add it to everything
##################################################################################################

interface Entity {
  id:        ID!
  expunged:  Boolean!
  createdAt: String!
  updatedAt: String!
}

interface Agency {
  active: Boolean!
}

interface Authorable {
  authors: [User!]!
}

interface Commentable {
  comments: [Comment!]!
}

# TODO: create Endorsement object
interface Endorseable {
  endorsements: [User!]!
}

interface Watchable {
  watchers: [User!]!
}

# TODO: add bookmarks
# TODO: add following
# TODO: add alerts
# TODO: add news
# TODO: add formerGroups
type User implements Entity, Agency {
  id:               ID!
  expunged:         Boolean!
  createdAt:        String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  updatedAt:        String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  active:           Boolean!
  name:             String! @fake(type: firstName)
  email:            String! @fake(type: email)
  location:         String! @fake(type: city)
  imageUrl:         String! @fake(type: imageUrl, options: { randomizeImageUrl: true, imageCategory: people })
  addressBook:      [User!]!
  groups:           [Group!]!
  comments:         [Comment!]!
  articles:         [Article!]!
  articlesEndorsed: [Article!]!
  requestsMade:     [Request!]!
  requestsPledged:  [Request!]!
  requestsEndorsed: [Request!]!
}

# TODO: add requestsFilled
# TODO: add requestsMade
type Group implements Entity, Agency {
  id:            ID!
  expunged:      Boolean!
  createdAt:     String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  updatedAt:     String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  active:        Boolean!
  name:          String! @fake(type: companyName)
  description:   String! @fake(type: lorem, options: { loremSize: paragraph })
  imageUrl:      String! @fake(type: imageUrl, options: { randomizeImageUrl: true, imageCategory: abstract })
  articles:      [Article!]!
  members:       [User!]!
  formerMembers: [User!]!
}

# TODO: can GraphQL do recursion yet?
type Comment implements Entity, Commentable, Endorseable, Watchable {
  id:            ID!
  expunged:      Boolean!
  createdAt:     String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  updatedAt:     String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  content:       String! @fake(type: lorem, options: { loremSize: paragraph })
  poster:        User!
  parent:        Commentable!
  comments:      [Comment!]!
  endorsements:  [User!]!
  watchers:      [User!]!
}

# TODO: create requestStatus
type Request implements Entity, Authorable, Commentable, Endorseable, Watchable {
  id:           ID!
  expunged:     Boolean!
  createdAt:    String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  updatedAt:    String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  title:        String! @fake(type: lorem, options: { loremSize: sentence })
  content:      String! @fake(type: lorem, options: { loremSize: paragraph })
  poster:       User!
  pledged:      [User!]!
  authors:      [User!]!
  comments:     [Comment!]!
  endorsements: [User!]!
  watchers:     [User!]!
}

# TODO: add relatedArticles
type Article implements Entity, Authorable, Commentable, Endorseable, Watchable {
  id:           ID!
  expunged:     Boolean!
  createdAt:    String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  updatedAt:    String! @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ssZ" })
  title:        String! @fake(type: lorem, options: { loremSize: words })
  abstract:     String! @fake(type: lorem, options: { loremSize: sentences })
  content:      String! @fake(type: lorem, options: { loremSize: paragraphs })
  poster:       User!
  authors:      [User!]!
  comments:     [Comment!]!
  endorsements: [User!]!
  watchers:     [User!]!
}

type Query {
  allUsers:     [User!]!
  user(id: ID): User

  allGroups:     [Group!]!
  group(id: ID): Group

  allComments:     [Comment!]!
  comment(id: ID): Comment

  allRequests:     [Request!]!
  request(id: ID): Request

  allArticles:     [Article!]!
  article(id: ID): Article
}
